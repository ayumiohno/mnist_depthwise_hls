-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MNIST_DepthwiseConv2dFinal_4_1_12_4_Pipeline_ld_VITIS_LOOP_110_1_VITIS_LOOP_112_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    point2_o78_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    point2_o78_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    point2_o78_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    point2_o78_empty_n : IN STD_LOGIC;
    point2_o78_read : OUT STD_LOGIC;
    input_buf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_buf_ce0 : OUT STD_LOGIC;
    input_buf_we0 : OUT STD_LOGIC;
    input_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_buf_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_buf_1_ce0 : OUT STD_LOGIC;
    input_buf_1_we0 : OUT STD_LOGIC;
    input_buf_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_buf_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_buf_2_ce0 : OUT STD_LOGIC;
    input_buf_2_we0 : OUT STD_LOGIC;
    input_buf_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_buf_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_buf_3_ce0 : OUT STD_LOGIC;
    input_buf_3_we0 : OUT STD_LOGIC;
    input_buf_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MNIST_DepthwiseConv2dFinal_4_1_12_4_Pipeline_ld_VITIS_LOOP_110_1_VITIS_LOOP_112_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_30 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln108_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal point2_o78_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln114_2_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ic_1_fu_76 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln112_fu_348_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal px_fu_80 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln110_1_fu_281_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_84 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln110_2_fu_360_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal py_fu_88 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln108_1_fu_231_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten13_fu_92 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln108_1_fu_188_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten13_load : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln108_fu_239_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln110_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln108_fu_211_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln112_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln108_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln108_fu_223_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln108_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln110_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln110_fu_261_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln114_fu_289_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_39_fu_301_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_fu_293_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln114_fu_309_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln110_fu_273_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln114_fu_313_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln114_1_fu_319_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln114_fu_323_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln110_1_fu_354_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MNIST_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component MNIST_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ic_1_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    ic_1_fu_76 <= ap_const_lv4_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    ic_1_fu_76 <= add_ln112_fu_348_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln108_fu_182_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten13_fu_92 <= add_ln108_1_fu_188_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_92 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_84 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    indvar_flatten_fu_84 <= select_ln110_2_fu_360_p3;
                end if;
            end if; 
        end if;
    end process;

    px_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    px_fu_80 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    px_fu_80 <= select_ln110_1_fu_281_p3;
                end if;
            end if; 
        end if;
    end process;

    py_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    py_fu_88 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    py_fu_88 <= select_ln108_1_fu_231_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln108_1_fu_188_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten13_load) + unsigned(ap_const_lv8_1));
    add_ln108_fu_211_p2 <= std_logic_vector(unsigned(py_fu_88) + unsigned(ap_const_lv3_1));
    add_ln110_1_fu_354_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_84) + unsigned(ap_const_lv7_1));
    add_ln110_fu_261_p2 <= std_logic_vector(unsigned(select_ln108_fu_223_p3) + unsigned(ap_const_lv3_1));
    add_ln112_fu_348_p2 <= std_logic_vector(unsigned(select_ln110_fu_273_p3) + unsigned(ap_const_lv4_1));
    add_ln114_fu_323_p2 <= std_logic_vector(unsigned(sub_ln114_fu_313_p2) + unsigned(zext_ln114_1_fu_319_p1));
    and_ln108_fu_255_p2 <= (xor_ln108_fu_243_p2 and icmp_ln112_fu_249_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, point2_o78_empty_n)
    begin
                ap_block_pp0_stage0_11001 <= ((point2_o78_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, point2_o78_empty_n)
    begin
                ap_block_pp0_stage0_subdone <= ((point2_o78_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(point2_o78_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (point2_o78_empty_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln108_fu_182_p2)
    begin
        if (((icmp_ln108_fu_182_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten13_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten13_fu_92)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten13_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten13_load <= indvar_flatten13_fu_92;
        end if; 
    end process;

    icmp_ln108_fu_182_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten13_load = ap_const_lv8_C0) else "0";
    icmp_ln110_fu_217_p2 <= "1" when (indvar_flatten_fu_84 = ap_const_lv7_30) else "0";
    icmp_ln112_fu_249_p2 <= "1" when (ic_1_fu_76 = ap_const_lv4_C) else "0";
    input_buf_1_address0 <= zext_ln114_2_fu_329_p1(6 - 1 downto 0);

    input_buf_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_buf_1_ce0 <= ap_const_logic_1;
        else 
            input_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_1_d0 <= tmp_fu_337_p1;

    input_buf_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln108_fu_239_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln108_fu_239_p1 = ap_const_lv2_1))) then 
            input_buf_1_we0 <= ap_const_logic_1;
        else 
            input_buf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_2_address0 <= zext_ln114_2_fu_329_p1(6 - 1 downto 0);

    input_buf_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_buf_2_ce0 <= ap_const_logic_1;
        else 
            input_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_2_d0 <= tmp_fu_337_p1;

    input_buf_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln108_fu_239_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln108_fu_239_p1 = ap_const_lv2_2))) then 
            input_buf_2_we0 <= ap_const_logic_1;
        else 
            input_buf_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_3_address0 <= zext_ln114_2_fu_329_p1(6 - 1 downto 0);

    input_buf_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_buf_3_ce0 <= ap_const_logic_1;
        else 
            input_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_3_d0 <= tmp_fu_337_p1;

    input_buf_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln108_fu_239_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln108_fu_239_p1 = ap_const_lv2_3))) then 
            input_buf_3_we0 <= ap_const_logic_1;
        else 
            input_buf_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_address0 <= zext_ln114_2_fu_329_p1(6 - 1 downto 0);

    input_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_buf_ce0 <= ap_const_logic_1;
        else 
            input_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_d0 <= tmp_fu_337_p1;

    input_buf_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln108_fu_239_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln108_fu_239_p1 = ap_const_lv2_0))) then 
            input_buf_we0 <= ap_const_logic_1;
        else 
            input_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln110_fu_267_p2 <= (icmp_ln110_fu_217_p2 or and_ln108_fu_255_p2);
    p_shl_fu_293_p3 <= (trunc_ln114_fu_289_p1 & ap_const_lv4_0);

    point2_o78_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, point2_o78_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            point2_o78_blk_n <= point2_o78_empty_n;
        else 
            point2_o78_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    point2_o78_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            point2_o78_read <= ap_const_logic_1;
        else 
            point2_o78_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln108_1_fu_231_p3 <= 
        add_ln108_fu_211_p2 when (icmp_ln110_fu_217_p2(0) = '1') else 
        py_fu_88;
    select_ln108_fu_223_p3 <= 
        ap_const_lv3_0 when (icmp_ln110_fu_217_p2(0) = '1') else 
        px_fu_80;
    select_ln110_1_fu_281_p3 <= 
        add_ln110_fu_261_p2 when (and_ln108_fu_255_p2(0) = '1') else 
        select_ln108_fu_223_p3;
    select_ln110_2_fu_360_p3 <= 
        ap_const_lv7_1 when (icmp_ln110_fu_217_p2(0) = '1') else 
        add_ln110_1_fu_354_p2;
    select_ln110_fu_273_p3 <= 
        ap_const_lv4_0 when (or_ln110_fu_267_p2(0) = '1') else 
        ic_1_fu_76;
    sub_ln114_fu_313_p2 <= std_logic_vector(unsigned(p_shl_fu_293_p3) - unsigned(zext_ln114_fu_309_p1));
    tmp_39_fu_301_p3 <= (select_ln110_1_fu_281_p3 & ap_const_lv2_0);
    tmp_fu_337_p1 <= point2_o78_dout;
    trunc_ln108_fu_239_p1 <= select_ln108_1_fu_231_p3(2 - 1 downto 0);
    trunc_ln114_fu_289_p1 <= select_ln110_1_fu_281_p3(2 - 1 downto 0);
    xor_ln108_fu_243_p2 <= (icmp_ln110_fu_217_p2 xor ap_const_lv1_1);
    zext_ln114_1_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln110_fu_273_p3),6));
    zext_ln114_2_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_fu_323_p2),64));
    zext_ln114_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_301_p3),6));
end behav;
