-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MNIST_PointwiseConv2d_10_1_4_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    depth1_o75_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    depth1_o75_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    depth1_o75_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    depth1_o75_empty_n : IN STD_LOGIC;
    depth1_o75_read : OUT STD_LOGIC;
    weights_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_ce0 : OUT STD_LOGIC;
    weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_ce1 : OUT STD_LOGIC;
    weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    point1_o76_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    point1_o76_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    point1_o76_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    point1_o76_full_n : IN STD_LOGIC;
    point1_o76_write : OUT STD_LOGIC );
end;


architecture behav of MNIST_PointwiseConv2d_10_1_4_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weights_load_reg_97 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal weights_load_1_reg_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_load_2_reg_117 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal weights_load_3_reg_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_start : STD_LOGIC;
    signal grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_done : STD_LOGIC;
    signal grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_idle : STD_LOGIC;
    signal grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_ready : STD_LOGIC;
    signal grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_point1_o76_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_point1_o76_write : STD_LOGIC;
    signal grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_depth1_o75_read : STD_LOGIC;
    signal grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MNIST_PointwiseConv2d_10_1_4_Pipeline_py_px IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        point1_o76_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        point1_o76_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        point1_o76_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        point1_o76_full_n : IN STD_LOGIC;
        point1_o76_write : OUT STD_LOGIC;
        depth1_o75_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        depth1_o75_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        depth1_o75_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        depth1_o75_empty_n : IN STD_LOGIC;
        depth1_o75_read : OUT STD_LOGIC;
        weights_load : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_load_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_load_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_load_3 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73 : component MNIST_PointwiseConv2d_10_1_4_Pipeline_py_px
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_start,
        ap_done => grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_done,
        ap_idle => grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_idle,
        ap_ready => grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_ready,
        point1_o76_din => grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_point1_o76_din,
        point1_o76_num_data_valid => ap_const_lv2_0,
        point1_o76_fifo_cap => ap_const_lv2_0,
        point1_o76_full_n => point1_o76_full_n,
        point1_o76_write => grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_point1_o76_write,
        depth1_o75_dout => depth1_o75_dout,
        depth1_o75_num_data_valid => ap_const_lv2_0,
        depth1_o75_fifo_cap => ap_const_lv2_0,
        depth1_o75_empty_n => depth1_o75_empty_n,
        depth1_o75_read => grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_depth1_o75_read,
        weights_load => weights_load_reg_97,
        weights_load_1 => weights_load_1_reg_102,
        weights_load_2 => weights_load_2_reg_117,
        weights_load_3 => weights_load_3_reg_122);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_ready = ap_const_logic_1)) then 
                    grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                weights_load_1_reg_102 <= weights_q0;
                weights_load_reg_97 <= weights_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                weights_load_2_reg_117 <= weights_q1;
                weights_load_3_reg_122 <= weights_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_done)
    begin
        if ((grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    depth1_o75_read_assign_proc : process(grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_depth1_o75_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            depth1_o75_read <= grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_depth1_o75_read;
        else 
            depth1_o75_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_start <= grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_start_reg;
    point1_o76_din <= grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_point1_o76_din;

    point1_o76_write_assign_proc : process(grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_point1_o76_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            point1_o76_write <= grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_point1_o76_write;
        else 
            point1_o76_write <= ap_const_logic_0;
        end if; 
    end process;


    weights_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            weights_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            weights_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            weights_address0 <= "XX";
        end if; 
    end process;


    weights_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            weights_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            weights_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            weights_address1 <= "XX";
        end if; 
    end process;


    weights_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            weights_ce0 <= ap_const_logic_1;
        else 
            weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_ce1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            weights_ce1 <= ap_const_logic_1;
        else 
            weights_ce1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
