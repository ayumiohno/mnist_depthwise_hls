-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MNIST_LoadInput is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    istrm_TVALID : IN STD_LOGIC;
    input74_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    input74_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    input74_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    input74_full_n : IN STD_LOGIC;
    input74_write : OUT STD_LOGIC;
    istrm_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    istrm_TREADY : OUT STD_LOGIC;
    istrm_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    istrm_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    istrm_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    istrm_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    istrm_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    istrm_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (4 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of MNIST_LoadInput is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln181_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal istrm_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal input74_blk_n : STD_LOGIC;
    signal tmp_data_V_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_dest_V_fu_56 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_id_V_fu_60 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_user_V_fu_64 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_strb_V_fu_68 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_fu_72 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_01_fu_76 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_6_fu_119_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal regslice_both_istrm_V_data_V_U_apdone_blk : STD_LOGIC;
    signal istrm_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal istrm_TVALID_int_regslice : STD_LOGIC;
    signal istrm_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_istrm_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_istrm_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal istrm_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_istrm_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_istrm_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_istrm_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal istrm_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_istrm_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_istrm_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_istrm_V_user_V_U_apdone_blk : STD_LOGIC;
    signal istrm_TUSER_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_istrm_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_istrm_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_istrm_V_last_V_U_apdone_blk : STD_LOGIC;
    signal istrm_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_istrm_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_istrm_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_istrm_V_id_V_U_apdone_blk : STD_LOGIC;
    signal istrm_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_istrm_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_istrm_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_istrm_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal istrm_TDEST_int_regslice : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_istrm_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_istrm_V_dest_V_U_ack_in : STD_LOGIC;
    signal ap_condition_102 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component MNIST_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component MNIST_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component MNIST_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);

    regslice_both_istrm_V_data_V_U : component MNIST_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => istrm_TDATA,
        vld_in => istrm_TVALID,
        ack_in => regslice_both_istrm_V_data_V_U_ack_in,
        data_out => istrm_TDATA_int_regslice,
        vld_out => istrm_TVALID_int_regslice,
        ack_out => istrm_TREADY_int_regslice,
        apdone_blk => regslice_both_istrm_V_data_V_U_apdone_blk);

    regslice_both_istrm_V_keep_V_U : component MNIST_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => istrm_TKEEP,
        vld_in => istrm_TVALID,
        ack_in => regslice_both_istrm_V_keep_V_U_ack_in,
        data_out => istrm_TKEEP_int_regslice,
        vld_out => regslice_both_istrm_V_keep_V_U_vld_out,
        ack_out => istrm_TREADY_int_regslice,
        apdone_blk => regslice_both_istrm_V_keep_V_U_apdone_blk);

    regslice_both_istrm_V_strb_V_U : component MNIST_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => istrm_TSTRB,
        vld_in => istrm_TVALID,
        ack_in => regslice_both_istrm_V_strb_V_U_ack_in,
        data_out => istrm_TSTRB_int_regslice,
        vld_out => regslice_both_istrm_V_strb_V_U_vld_out,
        ack_out => istrm_TREADY_int_regslice,
        apdone_blk => regslice_both_istrm_V_strb_V_U_apdone_blk);

    regslice_both_istrm_V_user_V_U : component MNIST_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => istrm_TUSER,
        vld_in => istrm_TVALID,
        ack_in => regslice_both_istrm_V_user_V_U_ack_in,
        data_out => istrm_TUSER_int_regslice,
        vld_out => regslice_both_istrm_V_user_V_U_vld_out,
        ack_out => istrm_TREADY_int_regslice,
        apdone_blk => regslice_both_istrm_V_user_V_U_apdone_blk);

    regslice_both_istrm_V_last_V_U : component MNIST_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => istrm_TLAST,
        vld_in => istrm_TVALID,
        ack_in => regslice_both_istrm_V_last_V_U_ack_in,
        data_out => istrm_TLAST_int_regslice,
        vld_out => regslice_both_istrm_V_last_V_U_vld_out,
        ack_out => istrm_TREADY_int_regslice,
        apdone_blk => regslice_both_istrm_V_last_V_U_apdone_blk);

    regslice_both_istrm_V_id_V_U : component MNIST_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => istrm_TID,
        vld_in => istrm_TVALID,
        ack_in => regslice_both_istrm_V_id_V_U_ack_in,
        data_out => istrm_TID_int_regslice,
        vld_out => regslice_both_istrm_V_id_V_U_vld_out,
        ack_out => istrm_TREADY_int_regslice,
        apdone_blk => regslice_both_istrm_V_id_V_U_apdone_blk);

    regslice_both_istrm_V_dest_V_U : component MNIST_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => istrm_TDEST,
        vld_in => istrm_TVALID,
        ack_in => regslice_both_istrm_V_dest_V_U_ack_in,
        data_out => istrm_TDEST_int_regslice,
        vld_out => regslice_both_istrm_V_dest_V_U_vld_out,
        ack_out => istrm_TREADY_int_regslice,
        apdone_blk => regslice_both_istrm_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv4_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln181_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_return_0_preg <= tmp_keep_V_fu_72;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv4_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln181_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_return_1_preg <= tmp_strb_V_fu_68;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv2_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln181_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_return_2_preg <= tmp_user_V_fu_64;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv5_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln181_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_return_3_preg <= tmp_id_V_fu_60;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv6_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln181_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_return_4_preg <= tmp_dest_V_fu_56;
                end if; 
            end if;
        end if;
    end process;


    i_01_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_102)) then
                if ((icmp_ln181_fu_113_p2 = ap_const_lv1_0)) then 
                    i_01_fu_76 <= i_6_fu_119_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_01_fu_76 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln181_fu_113_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_data_V_reg_264 <= istrm_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln181_fu_113_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_dest_V_fu_56 <= istrm_TDEST_int_regslice;
                tmp_id_V_fu_60 <= istrm_TID_int_regslice;
                tmp_keep_V_fu_72 <= istrm_TKEEP_int_regslice;
                tmp_strb_V_fu_68 <= istrm_TSTRB_int_regslice;
                tmp_user_V_fu_64 <= istrm_TUSER_int_regslice;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln181_fu_113_p2, ap_done_reg, input74_full_n, ap_start_int, istrm_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((input74_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((icmp_ln181_fu_113_p2 = ap_const_lv1_0) and (istrm_TVALID_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln181_fu_113_p2, ap_done_reg, input74_full_n, ap_start_int, istrm_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((input74_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((icmp_ln181_fu_113_p2 = ap_const_lv1_0) and (istrm_TVALID_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln181_fu_113_p2, ap_done_reg, input74_full_n, ap_start_int, istrm_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((input74_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start_int = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((icmp_ln181_fu_113_p2 = ap_const_lv1_0) and (istrm_TVALID_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(icmp_ln181_fu_113_p2, ap_done_reg, istrm_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or ((icmp_ln181_fu_113_p2 = ap_const_lv1_0) and (istrm_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(input74_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (input74_full_n = ap_const_logic_0);
    end process;


    ap_condition_102_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_102 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln181_fu_113_p2, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln181_fu_113_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln181_fu_113_p2, ap_block_pp0_stage0_11001, tmp_keep_V_fu_72, ap_return_0_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln181_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_return_0 <= tmp_keep_V_fu_72;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln181_fu_113_p2, ap_block_pp0_stage0_11001, tmp_strb_V_fu_68, ap_return_1_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln181_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_return_1 <= tmp_strb_V_fu_68;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln181_fu_113_p2, ap_block_pp0_stage0_11001, tmp_user_V_fu_64, ap_return_2_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln181_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_return_2 <= tmp_user_V_fu_64;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln181_fu_113_p2, ap_block_pp0_stage0_11001, tmp_id_V_fu_60, ap_return_3_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln181_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_return_3 <= tmp_id_V_fu_60;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln181_fu_113_p2, ap_block_pp0_stage0_11001, tmp_dest_V_fu_56, ap_return_4_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln181_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_return_4 <= tmp_dest_V_fu_56;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_01_fu_76, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_i <= i_01_fu_76;
        end if; 
    end process;

    i_6_fu_119_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv10_1));
    icmp_ln181_fu_113_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv10_310) else "0";

    input74_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, input74_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input74_blk_n <= input74_full_n;
        else 
            input74_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input74_din <= tmp_data_V_reg_264;

    input74_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input74_write <= ap_const_logic_1;
        else 
            input74_write <= ap_const_logic_0;
        end if; 
    end process;


    istrm_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln181_fu_113_p2, ap_done_reg, ap_block_pp0_stage0, ap_start_int, istrm_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_done_reg = ap_const_logic_0) and (icmp_ln181_fu_113_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            istrm_TDATA_blk_n <= istrm_TVALID_int_regslice;
        else 
            istrm_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    istrm_TREADY <= regslice_both_istrm_V_data_V_U_ack_in;

    istrm_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln181_fu_113_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln181_fu_113_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            istrm_TREADY_int_regslice <= ap_const_logic_1;
        else 
            istrm_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

end behav;
