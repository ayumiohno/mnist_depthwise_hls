// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MNIST_DepthwiseConv2dFinal_4_1_12_4_Pipeline_ld_VITIS_LOOP_110_1_VITIS_LOOP_112_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        point2_o78_dout,
        point2_o78_num_data_valid,
        point2_o78_fifo_cap,
        point2_o78_empty_n,
        point2_o78_read,
        input_buf_address0,
        input_buf_ce0,
        input_buf_we0,
        input_buf_d0,
        input_buf_1_address0,
        input_buf_1_ce0,
        input_buf_1_we0,
        input_buf_1_d0,
        input_buf_2_address0,
        input_buf_2_ce0,
        input_buf_2_we0,
        input_buf_2_d0,
        input_buf_3_address0,
        input_buf_3_ce0,
        input_buf_3_we0,
        input_buf_3_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] point2_o78_dout;
input  [1:0] point2_o78_num_data_valid;
input  [1:0] point2_o78_fifo_cap;
input   point2_o78_empty_n;
output   point2_o78_read;
output  [5:0] input_buf_address0;
output   input_buf_ce0;
output   input_buf_we0;
output  [31:0] input_buf_d0;
output  [5:0] input_buf_1_address0;
output   input_buf_1_ce0;
output   input_buf_1_we0;
output  [31:0] input_buf_1_d0;
output  [5:0] input_buf_2_address0;
output   input_buf_2_ce0;
output   input_buf_2_we0;
output  [31:0] input_buf_2_d0;
output  [5:0] input_buf_3_address0;
output   input_buf_3_ce0;
output   input_buf_3_we0;
output  [31:0] input_buf_3_d0;

reg ap_idle;
reg point2_o78_read;
reg input_buf_ce0;
reg input_buf_we0;
reg input_buf_1_ce0;
reg input_buf_1_we0;
reg input_buf_2_ce0;
reg input_buf_2_we0;
reg input_buf_3_ce0;
reg input_buf_3_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln108_fu_182_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    point2_o78_blk_n;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln114_2_fu_329_p1;
reg   [3:0] ic_1_fu_76;
wire   [3:0] add_ln112_fu_348_p2;
reg    ap_block_pp0_stage0_11001;
wire    ap_loop_init;
reg   [2:0] px_fu_80;
wire   [2:0] select_ln110_1_fu_281_p3;
reg   [6:0] indvar_flatten_fu_84;
wire   [6:0] select_ln110_2_fu_360_p3;
reg   [2:0] py_fu_88;
wire   [2:0] select_ln108_1_fu_231_p3;
reg   [7:0] indvar_flatten13_fu_92;
wire   [7:0] add_ln108_1_fu_188_p2;
reg   [7:0] ap_sig_allocacmp_indvar_flatten13_load;
wire   [1:0] trunc_ln108_fu_239_p1;
wire   [31:0] tmp_fu_337_p1;
wire   [0:0] icmp_ln110_fu_217_p2;
wire   [2:0] add_ln108_fu_211_p2;
wire   [0:0] icmp_ln112_fu_249_p2;
wire   [0:0] xor_ln108_fu_243_p2;
wire   [2:0] select_ln108_fu_223_p3;
wire   [0:0] and_ln108_fu_255_p2;
wire   [0:0] or_ln110_fu_267_p2;
wire   [2:0] add_ln110_fu_261_p2;
wire   [1:0] trunc_ln114_fu_289_p1;
wire   [4:0] tmp_39_fu_301_p3;
wire   [5:0] p_shl_fu_293_p3;
wire   [5:0] zext_ln114_fu_309_p1;
wire   [3:0] select_ln110_fu_273_p3;
wire   [5:0] sub_ln114_fu_313_p2;
wire   [5:0] zext_ln114_1_fu_319_p1;
wire   [5:0] add_ln114_fu_323_p2;
wire   [6:0] add_ln110_1_fu_354_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

MNIST_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ic_1_fu_76 <= 4'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ic_1_fu_76 <= add_ln112_fu_348_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln108_fu_182_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten13_fu_92 <= add_ln108_1_fu_188_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_92 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_84 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            indvar_flatten_fu_84 <= select_ln110_2_fu_360_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            px_fu_80 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            px_fu_80 <= select_ln110_1_fu_281_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            py_fu_88 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            py_fu_88 <= select_ln108_1_fu_231_p3;
        end
    end
end

always @ (*) begin
    if (((icmp_ln108_fu_182_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten13_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten13_load = indvar_flatten13_fu_92;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buf_1_ce0 = 1'b1;
    end else begin
        input_buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln108_fu_239_p1 == 2'd1))) begin
        input_buf_1_we0 = 1'b1;
    end else begin
        input_buf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buf_2_ce0 = 1'b1;
    end else begin
        input_buf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln108_fu_239_p1 == 2'd2))) begin
        input_buf_2_we0 = 1'b1;
    end else begin
        input_buf_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buf_3_ce0 = 1'b1;
    end else begin
        input_buf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln108_fu_239_p1 == 2'd3))) begin
        input_buf_3_we0 = 1'b1;
    end else begin
        input_buf_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buf_ce0 = 1'b1;
    end else begin
        input_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln108_fu_239_p1 == 2'd0))) begin
        input_buf_we0 = 1'b1;
    end else begin
        input_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        point2_o78_blk_n = point2_o78_empty_n;
    end else begin
        point2_o78_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        point2_o78_read = 1'b1;
    end else begin
        point2_o78_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln108_1_fu_188_p2 = (ap_sig_allocacmp_indvar_flatten13_load + 8'd1);

assign add_ln108_fu_211_p2 = (py_fu_88 + 3'd1);

assign add_ln110_1_fu_354_p2 = (indvar_flatten_fu_84 + 7'd1);

assign add_ln110_fu_261_p2 = (select_ln108_fu_223_p3 + 3'd1);

assign add_ln112_fu_348_p2 = (select_ln110_fu_273_p3 + 4'd1);

assign add_ln114_fu_323_p2 = (sub_ln114_fu_313_p2 + zext_ln114_1_fu_319_p1);

assign and_ln108_fu_255_p2 = (xor_ln108_fu_243_p2 & icmp_ln112_fu_249_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((point2_o78_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((point2_o78_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (point2_o78_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln108_fu_182_p2 = ((ap_sig_allocacmp_indvar_flatten13_load == 8'd192) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_217_p2 = ((indvar_flatten_fu_84 == 7'd48) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_249_p2 = ((ic_1_fu_76 == 4'd12) ? 1'b1 : 1'b0);

assign input_buf_1_address0 = zext_ln114_2_fu_329_p1;

assign input_buf_1_d0 = tmp_fu_337_p1;

assign input_buf_2_address0 = zext_ln114_2_fu_329_p1;

assign input_buf_2_d0 = tmp_fu_337_p1;

assign input_buf_3_address0 = zext_ln114_2_fu_329_p1;

assign input_buf_3_d0 = tmp_fu_337_p1;

assign input_buf_address0 = zext_ln114_2_fu_329_p1;

assign input_buf_d0 = tmp_fu_337_p1;

assign or_ln110_fu_267_p2 = (icmp_ln110_fu_217_p2 | and_ln108_fu_255_p2);

assign p_shl_fu_293_p3 = {{trunc_ln114_fu_289_p1}, {4'd0}};

assign select_ln108_1_fu_231_p3 = ((icmp_ln110_fu_217_p2[0:0] == 1'b1) ? add_ln108_fu_211_p2 : py_fu_88);

assign select_ln108_fu_223_p3 = ((icmp_ln110_fu_217_p2[0:0] == 1'b1) ? 3'd0 : px_fu_80);

assign select_ln110_1_fu_281_p3 = ((and_ln108_fu_255_p2[0:0] == 1'b1) ? add_ln110_fu_261_p2 : select_ln108_fu_223_p3);

assign select_ln110_2_fu_360_p3 = ((icmp_ln110_fu_217_p2[0:0] == 1'b1) ? 7'd1 : add_ln110_1_fu_354_p2);

assign select_ln110_fu_273_p3 = ((or_ln110_fu_267_p2[0:0] == 1'b1) ? 4'd0 : ic_1_fu_76);

assign sub_ln114_fu_313_p2 = (p_shl_fu_293_p3 - zext_ln114_fu_309_p1);

assign tmp_39_fu_301_p3 = {{select_ln110_1_fu_281_p3}, {2'd0}};

assign tmp_fu_337_p1 = point2_o78_dout;

assign trunc_ln108_fu_239_p1 = select_ln108_1_fu_231_p3[1:0];

assign trunc_ln114_fu_289_p1 = select_ln110_1_fu_281_p3[1:0];

assign xor_ln108_fu_243_p2 = (icmp_ln110_fu_217_p2 ^ 1'd1);

assign zext_ln114_1_fu_319_p1 = select_ln110_fu_273_p3;

assign zext_ln114_2_fu_329_p1 = add_ln114_fu_323_p2;

assign zext_ln114_fu_309_p1 = tmp_39_fu_301_p3;

endmodule //MNIST_DepthwiseConv2dFinal_4_1_12_4_Pipeline_ld_VITIS_LOOP_110_1_VITIS_LOOP_112_2
