// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MNIST_LoadInput (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        istrm_TVALID,
        input74_din,
        input74_num_data_valid,
        input74_fifo_cap,
        input74_full_n,
        input74_write,
        istrm_TDATA,
        istrm_TREADY,
        istrm_TKEEP,
        istrm_TSTRB,
        istrm_TUSER,
        istrm_TLAST,
        istrm_TID,
        istrm_TDEST,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   istrm_TVALID;
output  [31:0] input74_din;
input  [1:0] input74_num_data_valid;
input  [1:0] input74_fifo_cap;
input   input74_full_n;
output   input74_write;
input  [31:0] istrm_TDATA;
output   istrm_TREADY;
input  [3:0] istrm_TKEEP;
input  [3:0] istrm_TSTRB;
input  [1:0] istrm_TUSER;
input  [0:0] istrm_TLAST;
input  [4:0] istrm_TID;
input  [5:0] istrm_TDEST;
output  [3:0] ap_return_0;
output  [3:0] ap_return_1;
output  [1:0] ap_return_2;
output  [4:0] ap_return_3;
output  [5:0] ap_return_4;

reg ap_idle;
reg input74_write;
reg[3:0] ap_return_0;
reg[3:0] ap_return_1;
reg[1:0] ap_return_2;
reg[4:0] ap_return_3;
reg[5:0] ap_return_4;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] icmp_ln181_fu_113_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    istrm_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    input74_blk_n;
reg   [31:0] tmp_data_V_reg_264;
reg    ap_block_pp0_stage0_11001;
reg   [5:0] tmp_dest_V_fu_56;
reg   [4:0] tmp_id_V_fu_60;
reg   [1:0] tmp_user_V_fu_64;
reg   [3:0] tmp_strb_V_fu_68;
reg   [3:0] tmp_keep_V_fu_72;
reg   [9:0] i_01_fu_76;
wire   [9:0] i_6_fu_119_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_i;
reg    ap_block_pp0_stage0_01001;
reg   [3:0] ap_return_0_preg;
reg   [3:0] ap_return_1_preg;
reg   [1:0] ap_return_2_preg;
reg   [4:0] ap_return_3_preg;
reg   [5:0] ap_return_4_preg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    regslice_both_istrm_V_data_V_U_apdone_blk;
wire   [31:0] istrm_TDATA_int_regslice;
wire    istrm_TVALID_int_regslice;
reg    istrm_TREADY_int_regslice;
wire    regslice_both_istrm_V_data_V_U_ack_in;
wire    regslice_both_istrm_V_keep_V_U_apdone_blk;
wire   [3:0] istrm_TKEEP_int_regslice;
wire    regslice_both_istrm_V_keep_V_U_vld_out;
wire    regslice_both_istrm_V_keep_V_U_ack_in;
wire    regslice_both_istrm_V_strb_V_U_apdone_blk;
wire   [3:0] istrm_TSTRB_int_regslice;
wire    regslice_both_istrm_V_strb_V_U_vld_out;
wire    regslice_both_istrm_V_strb_V_U_ack_in;
wire    regslice_both_istrm_V_user_V_U_apdone_blk;
wire   [1:0] istrm_TUSER_int_regslice;
wire    regslice_both_istrm_V_user_V_U_vld_out;
wire    regslice_both_istrm_V_user_V_U_ack_in;
wire    regslice_both_istrm_V_last_V_U_apdone_blk;
wire   [0:0] istrm_TLAST_int_regslice;
wire    regslice_both_istrm_V_last_V_U_vld_out;
wire    regslice_both_istrm_V_last_V_U_ack_in;
wire    regslice_both_istrm_V_id_V_U_apdone_blk;
wire   [4:0] istrm_TID_int_regslice;
wire    regslice_both_istrm_V_id_V_U_vld_out;
wire    regslice_both_istrm_V_id_V_U_ack_in;
wire    regslice_both_istrm_V_dest_V_U_apdone_blk;
wire   [5:0] istrm_TDEST_int_regslice;
wire    regslice_both_istrm_V_dest_V_U_vld_out;
wire    regslice_both_istrm_V_dest_V_U_ack_in;
reg    ap_condition_102;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_return_0_preg = 4'd0;
#0 ap_return_1_preg = 4'd0;
#0 ap_return_2_preg = 2'd0;
#0 ap_return_3_preg = 5'd0;
#0 ap_return_4_preg = 6'd0;
end

MNIST_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

MNIST_regslice_both #(
    .DataWidth( 32 ))
regslice_both_istrm_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(istrm_TDATA),
    .vld_in(istrm_TVALID),
    .ack_in(regslice_both_istrm_V_data_V_U_ack_in),
    .data_out(istrm_TDATA_int_regslice),
    .vld_out(istrm_TVALID_int_regslice),
    .ack_out(istrm_TREADY_int_regslice),
    .apdone_blk(regslice_both_istrm_V_data_V_U_apdone_blk)
);

MNIST_regslice_both #(
    .DataWidth( 4 ))
regslice_both_istrm_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(istrm_TKEEP),
    .vld_in(istrm_TVALID),
    .ack_in(regslice_both_istrm_V_keep_V_U_ack_in),
    .data_out(istrm_TKEEP_int_regslice),
    .vld_out(regslice_both_istrm_V_keep_V_U_vld_out),
    .ack_out(istrm_TREADY_int_regslice),
    .apdone_blk(regslice_both_istrm_V_keep_V_U_apdone_blk)
);

MNIST_regslice_both #(
    .DataWidth( 4 ))
regslice_both_istrm_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(istrm_TSTRB),
    .vld_in(istrm_TVALID),
    .ack_in(regslice_both_istrm_V_strb_V_U_ack_in),
    .data_out(istrm_TSTRB_int_regslice),
    .vld_out(regslice_both_istrm_V_strb_V_U_vld_out),
    .ack_out(istrm_TREADY_int_regslice),
    .apdone_blk(regslice_both_istrm_V_strb_V_U_apdone_blk)
);

MNIST_regslice_both #(
    .DataWidth( 2 ))
regslice_both_istrm_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(istrm_TUSER),
    .vld_in(istrm_TVALID),
    .ack_in(regslice_both_istrm_V_user_V_U_ack_in),
    .data_out(istrm_TUSER_int_regslice),
    .vld_out(regslice_both_istrm_V_user_V_U_vld_out),
    .ack_out(istrm_TREADY_int_regslice),
    .apdone_blk(regslice_both_istrm_V_user_V_U_apdone_blk)
);

MNIST_regslice_both #(
    .DataWidth( 1 ))
regslice_both_istrm_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(istrm_TLAST),
    .vld_in(istrm_TVALID),
    .ack_in(regslice_both_istrm_V_last_V_U_ack_in),
    .data_out(istrm_TLAST_int_regslice),
    .vld_out(regslice_both_istrm_V_last_V_U_vld_out),
    .ack_out(istrm_TREADY_int_regslice),
    .apdone_blk(regslice_both_istrm_V_last_V_U_apdone_blk)
);

MNIST_regslice_both #(
    .DataWidth( 5 ))
regslice_both_istrm_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(istrm_TID),
    .vld_in(istrm_TVALID),
    .ack_in(regslice_both_istrm_V_id_V_U_ack_in),
    .data_out(istrm_TID_int_regslice),
    .vld_out(regslice_both_istrm_V_id_V_U_vld_out),
    .ack_out(istrm_TREADY_int_regslice),
    .apdone_blk(regslice_both_istrm_V_id_V_U_apdone_blk)
);

MNIST_regslice_both #(
    .DataWidth( 6 ))
regslice_both_istrm_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(istrm_TDEST),
    .vld_in(istrm_TVALID),
    .ack_in(regslice_both_istrm_V_dest_V_U_ack_in),
    .data_out(istrm_TDEST_int_regslice),
    .vld_out(regslice_both_istrm_V_dest_V_U_vld_out),
    .ack_out(istrm_TREADY_int_regslice),
    .apdone_blk(regslice_both_istrm_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 4'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln181_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_return_0_preg <= tmp_keep_V_fu_72;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 4'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln181_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_return_1_preg <= tmp_strb_V_fu_68;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 2'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln181_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_return_2_preg <= tmp_user_V_fu_64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 5'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln181_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_return_3_preg <= tmp_id_V_fu_60;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 6'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln181_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_return_4_preg <= tmp_dest_V_fu_56;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_102)) begin
        if ((icmp_ln181_fu_113_p2 == 1'd0)) begin
            i_01_fu_76 <= i_6_fu_119_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_01_fu_76 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln181_fu_113_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_V_reg_264 <= istrm_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln181_fu_113_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_dest_V_fu_56 <= istrm_TDEST_int_regslice;
        tmp_id_V_fu_60 <= istrm_TID_int_regslice;
        tmp_keep_V_fu_72 <= istrm_TKEEP_int_regslice;
        tmp_strb_V_fu_68 <= istrm_TSTRB_int_regslice;
        tmp_user_V_fu_64 <= istrm_TUSER_int_regslice;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln181_fu_113_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln181_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_return_0 = tmp_keep_V_fu_72;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln181_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_return_1 = tmp_strb_V_fu_68;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln181_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_return_2 = tmp_user_V_fu_64;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln181_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_return_3 = tmp_id_V_fu_60;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln181_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_return_4 = tmp_dest_V_fu_56;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 10'd0;
    end else begin
        ap_sig_allocacmp_i = i_01_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input74_blk_n = input74_full_n;
    end else begin
        input74_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input74_write = 1'b1;
    end else begin
        input74_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (icmp_ln181_fu_113_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        istrm_TDATA_blk_n = istrm_TVALID_int_regslice;
    end else begin
        istrm_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln181_fu_113_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        istrm_TREADY_int_regslice = 1'b1;
    end else begin
        istrm_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((input74_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | ((icmp_ln181_fu_113_p2 == 1'd0) & (istrm_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((input74_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | ((icmp_ln181_fu_113_p2 == 1'd0) & (istrm_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((input74_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | ((icmp_ln181_fu_113_p2 == 1'd0) & (istrm_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((icmp_ln181_fu_113_p2 == 1'd0) & (istrm_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (input74_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_102 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_6_fu_119_p2 = (ap_sig_allocacmp_i + 10'd1);

assign icmp_ln181_fu_113_p2 = ((ap_sig_allocacmp_i == 10'd784) ? 1'b1 : 1'b0);

assign input74_din = tmp_data_V_reg_264;

assign istrm_TREADY = regslice_both_istrm_V_data_V_U_ack_in;

endmodule //MNIST_LoadInput
