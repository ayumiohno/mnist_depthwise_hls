// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MNIST_PointwiseConv2d_10_1_4_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        depth1_o75_dout,
        depth1_o75_num_data_valid,
        depth1_o75_fifo_cap,
        depth1_o75_empty_n,
        depth1_o75_read,
        weights_address0,
        weights_ce0,
        weights_q0,
        weights_address1,
        weights_ce1,
        weights_q1,
        point1_o76_din,
        point1_o76_num_data_valid,
        point1_o76_fifo_cap,
        point1_o76_full_n,
        point1_o76_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] depth1_o75_dout;
input  [1:0] depth1_o75_num_data_valid;
input  [1:0] depth1_o75_fifo_cap;
input   depth1_o75_empty_n;
output   depth1_o75_read;
output  [1:0] weights_address0;
output   weights_ce0;
input  [31:0] weights_q0;
output  [1:0] weights_address1;
output   weights_ce1;
input  [31:0] weights_q1;
output  [31:0] point1_o76_din;
input  [1:0] point1_o76_num_data_valid;
input  [1:0] point1_o76_fifo_cap;
input   point1_o76_full_n;
output   point1_o76_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg depth1_o75_read;
reg[1:0] weights_address0;
reg weights_ce0;
reg[1:0] weights_address1;
reg weights_ce1;
reg point1_o76_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] weights_load_reg_97;
wire    ap_CS_fsm_state2;
reg   [31:0] weights_load_1_reg_102;
reg   [31:0] weights_load_2_reg_117;
wire    ap_CS_fsm_state3;
reg   [31:0] weights_load_3_reg_122;
wire    grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_start;
wire    grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_done;
wire    grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_idle;
wire    grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_ready;
wire   [31:0] grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_point1_o76_din;
wire    grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_point1_o76_write;
wire    grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_depth1_o75_read;
reg    grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_start_reg;
wire    ap_CS_fsm_state4;
reg    ap_block_state1;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_start_reg = 1'b0;
end

MNIST_PointwiseConv2d_10_1_4_Pipeline_py_px grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_start),
    .ap_done(grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_done),
    .ap_idle(grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_idle),
    .ap_ready(grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_ready),
    .point1_o76_din(grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_point1_o76_din),
    .point1_o76_num_data_valid(2'd0),
    .point1_o76_fifo_cap(2'd0),
    .point1_o76_full_n(point1_o76_full_n),
    .point1_o76_write(grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_point1_o76_write),
    .depth1_o75_dout(depth1_o75_dout),
    .depth1_o75_num_data_valid(2'd0),
    .depth1_o75_fifo_cap(2'd0),
    .depth1_o75_empty_n(depth1_o75_empty_n),
    .depth1_o75_read(grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_depth1_o75_read),
    .weights_load(weights_load_reg_97),
    .weights_load_1(weights_load_1_reg_102),
    .weights_load_2(weights_load_2_reg_117),
    .weights_load_3(weights_load_3_reg_122)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_start_reg <= 1'b1;
        end else if ((grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_ready == 1'b1)) begin
            grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        weights_load_1_reg_102 <= weights_q0;
        weights_load_reg_97 <= weights_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weights_load_2_reg_117 <= weights_q1;
        weights_load_3_reg_122 <= weights_q0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        depth1_o75_read = grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_depth1_o75_read;
    end else begin
        depth1_o75_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        point1_o76_write = grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_point1_o76_write;
    end else begin
        point1_o76_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        weights_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        weights_address0 = 64'd1;
    end else begin
        weights_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        weights_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        weights_address1 = 64'd0;
    end else begin
        weights_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        weights_ce0 = 1'b1;
    end else begin
        weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        weights_ce1 = 1'b1;
    end else begin
        weights_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_start = grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_ap_start_reg;

assign point1_o76_din = grp_PointwiseConv2d_10_1_4_Pipeline_py_px_fu_73_point1_o76_din;

endmodule //MNIST_PointwiseConv2d_10_1_4_s
